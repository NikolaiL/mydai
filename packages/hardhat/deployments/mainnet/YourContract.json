{
  "address": "0x73bb1721178cb8126e04459dfD1Ac037caA414E2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getDaiToUsdPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEthToDaiPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEthToUsdPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapEthToDai",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x130a588a6b6d8c87e428302b5fade13784239e73adffbae2f32f220c73f0c785",
  "receipt": {
    "to": null,
    "from": "0xE20968f84A535be7d7a97d3a1a5760d89D6c4Ce0",
    "contractAddress": "0x73bb1721178cb8126e04459dfD1Ac037caA414E2",
    "transactionIndex": 15,
    "gasUsed": "748953",
    "logsBloom": "0x
    "blockHash": "0xc84f5673d5d23a3da26548cd67b4bdeb95600806ef6b002ec6e9c0be4b941d7a",
    "transactionHash": "0x130a588a6b6d8c87e428302b5fade13784239e73adffbae2f32f220c73f0c785",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 22930213,
        "transactionHash": "0x130a588a6b6d8c87e428302b5fade13784239e73adffbae2f32f220c73f0c785",
        "address": "0x73bb1721178cb8126e04459dfD1Ac037caA414E2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e20968f84a535be7d7a97d3a1a5760d89d6c4ce0"
        ],
        "data": "0x",
        "logIndex": 104,
        "blockHash": "0xc84f5673d5d23a3da26548cd67b4bdeb95600806ef6b002ec6e9c0be4b941d7a"
      }
    ],
    "blockNumber": 22930213,
    "cumulativeGasUsed": "3897647",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE20968f84A535be7d7a97d3a1a5760d89D6c4Ce0"
  ],
  "numDeployments": 4,
  "solcInputHash": "a7957971688c4cae45136c77db57b564",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getDaiToUsdPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthToDaiPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthToUsdPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEthToDai\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"BuidlGuidl\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"withdraw()\":{\"notice\":\"Function that allows the owner to withdraw all the Ether in the contract The function can only be called by the owner of the contract as defined by the isOwner modifier\"}},\"notice\":\"A smart contract that allows changing a state variable of the contract and tracking the changes It also allows the owner to withdraw the Ether in the contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourContract.sol\":\"YourContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"contracts/YourContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ninterface IUniswapV2Router {\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n}\\n\\n/**\\n * A smart contract that allows changing a state variable of the contract and tracking the changes\\n * It also allows the owner to withdraw the Ether in the contract\\n * @author BuidlGuidl\\n */\\ncontract YourContract is Ownable, Pausable {\\n    address private constant UNISWAP_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    address private constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    address private constant DAI_USD_PAIR = 0xAed0c38402a5d19df6E4c03F4E2DceD6e29c1ee9;\\n    address private constant ETH_USD_PAIR = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\\n\\n    AggregatorV3Interface ethUsdPriceFeed;\\n    AggregatorV3Interface daiUsdPriceFeed;\\n\\n    IUniswapV2Router private router;\\n\\n    constructor(address _owner) Ownable(_owner) {\\n        router = IUniswapV2Router(UNISWAP_V2_ROUTER);\\n        ethUsdPriceFeed = AggregatorV3Interface(ETH_USD_PAIR);\\n        daiUsdPriceFeed = AggregatorV3Interface(DAI_USD_PAIR);\\n    }\\n\\n    /**\\n     * Function that allows the owner to withdraw all the Ether in the contract\\n     * The function can only be called by the owner of the contract as defined by the isOwner modifier\\n     */\\n    function withdraw() public onlyOwner {\\n        (bool success, ) = payable(owner()).call{ value: address(this).balance }(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function getEthToDaiPrice() public view returns (uint) {\\n        (, int ethUsd, , , ) = ethUsdPriceFeed.latestRoundData();\\n        (, int daiUsd, , , ) = daiUsdPriceFeed.latestRoundData();\\n        return (uint(ethUsd) * 1e18) / uint(daiUsd);\\n    }\\n\\n    function getEthToUsdPrice() public view returns (uint) {\\n        (, int ethUsd, , , ) = ethUsdPriceFeed.latestRoundData();\\n        return uint(ethUsd);\\n    }\\n\\n    function getDaiToUsdPrice() public view returns (uint) {\\n        (, int daiUsd, , , ) = daiUsdPriceFeed.latestRoundData();\\n        return uint(daiUsd);\\n    }\\n\\n    function swapEthToDai() public payable whenNotPaused {\\n        require(msg.value > 0, \\\"Send ETH to swap\\\");\\n\\n        address[] memory path = new address[](2);\\n        path[0] = WETH;\\n        path[1] = DAI;\\n\\n        uint slippage = 50; // 0.5%\\n        uint multiplier = 10000; // 100%\\n        uint deadline = block.timestamp + 300; // 5 minutes\\n\\n        uint amountOutMin = getEthToDaiPrice() * msg.value * (multiplier - slippage) / multiplier / 1e18;\\n\\n        router.swapExactETHForTokens{ value: msg.value }(\\n            amountOutMin,\\n            path,\\n            msg.sender,\\n            deadline\\n        );\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    // Allow contract to receive ETH\\n    receive() external payable {\\n        if (msg.value > 0) {\\n            swapEthToDai();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2eba0576a71685d6781f447f929f68ed66055fb6eb4ac63b4d0d3b51792e019f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610c49380380610c4983398101604081905261002f91610131565b806001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b610067816100e1565b50506000805460ff60a01b19169055600380546001600160a01b0319908116737a250d5630b4cf539739df2c5dacb4c659f2488d17909155600180548216735f4ec3df9cbd43714fe2740f5e3616155c5b84191790556002805490911673aed0c38402a5d19df6e4c03f4e2dced6e29c1ee9179055610161565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561014357600080fd5b81516001600160a01b038116811461015a57600080fd5b9392505050565b610ad9806101706000396000f3fe6080604052600436106100a05760003560e01c80638456cb59116100645780638456cb591461014b5780638da5cb5b14610160578063b37bbc2914610188578063d3f7836e14610190578063e3ac11ec146101a5578063f2fde38b146101ba57600080fd5b80630bf10e8c146100ba5780633ccfd60b146100e25780633f4ba83a146100f75780635c975abb1461010c578063715018a61461013657600080fd5b366100b55734156100b3576100b36101da565b005b600080fd5b3480156100c657600080fd5b506100cf6103b7565b6040519081526020015b60405180910390f35b3480156100ee57600080fd5b506100b361043c565b34801561010357600080fd5b506100b36104e1565b34801561011857600080fd5b50600054600160a01b900460ff1660405190151581526020016100d9565b34801561014257600080fd5b506100b36104f3565b34801561015757600080fd5b506100b3610505565b34801561016c57600080fd5b506000546040516001600160a01b0390911681526020016100d9565b6100b36101da565b34801561019c57600080fd5b506100cf610515565b3480156101b157600080fd5b506100cf61056b565b3480156101c657600080fd5b506100b36101d5366004610835565b610690565b6101e26106cb565b6000341161022a5760405162461bcd60e51b815260206004820152601060248201526f053656e642045544820746f20737761760841b60448201526064015b60405180910390fd5b60408051600280825260608201835260009260208301908036833701905050905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2816000815181106102735761027361087b565b60200260200101906001600160a01b031690816001600160a01b031681525050736b175474e89094c44da98b954eedeac495271d0f816001815181106102bb576102bb61087b565b6001600160a01b0390921660209283029190910190910152603261271060006102e64261012c6108a7565b90506000670de0b6b3a7640000836102fe86826108c0565b3461030761056b565b61031191906108d3565b61031b91906108d3565b61032591906108ea565b61032f91906108ea565b600354604051637ff36ab560e01b81529192506001600160a01b031690637ff36ab59034906103689085908a903390899060040161090c565b60006040518083038185885af1158015610386573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526103af9190810190610976565b505050505050565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561040d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104319190610a53565b509195945050505050565b6104446106f6565b600080546040516001600160a01b039091169047908381818185875af1925050503d8060008114610491576040519150601f19603f3d011682016040523d82523d6000602084013e610496565b606091505b50509050806104de5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610221565b50565b6104e96106f6565b6104f1610723565b565b6104fb6106f6565b6104f16000610778565b61050d6106f6565b6104f16107c8565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561040d573d6000803e3d6000fd5b600080600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156105c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e59190610a53565b5050509150506000600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610640573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106649190610a53565b5050509150508082670de0b6b3a764000061067f91906108d3565b61068991906108ea565b9250505090565b6106986106f6565b6001600160a01b0381166106c257604051631e4fbdf760e01b815260006004820152602401610221565b6104de81610778565b600054600160a01b900460ff16156104f15760405163d93c066560e01b815260040160405180910390fd5b6000546001600160a01b031633146104f15760405163118cdaa760e01b8152336004820152602401610221565b61072b61080b565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107d06106cb565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861075b3390565b600054600160a01b900460ff166104f157604051638dfc202b60e01b815260040160405180910390fd5b60006020828403121561084757600080fd5b81356001600160a01b038116811461085e57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156108ba576108ba610891565b92915050565b818103818111156108ba576108ba610891565b80820281158282048414176108ba576108ba610891565b60008261090757634e487b7160e01b600052601260045260246000fd5b500490565b600060808201868352602060808185015281875180845260a086019150828901935060005b818110156109565784516001600160a01b031683529383019391830191600101610931565b50506001600160a01b039690961660408501525050506060015292915050565b6000602080838503121561098957600080fd5b825167ffffffffffffffff808211156109a157600080fd5b818501915085601f8301126109b557600080fd5b8151818111156109c7576109c7610865565b8060051b604051601f19603f830116810181811085821117156109ec576109ec610865565b604052918252848201925083810185019188831115610a0a57600080fd5b938501935b82851015610a2857845184529385019392850192610a0f565b98975050505050505050565b805169ffffffffffffffffffff81168114610a4e57600080fd5b919050565b600080600080600060a08688031215610a6b57600080fd5b610a7486610a34565b9450602086015193506040860151925060608601519150610a9760808701610a34565b9050929550929590935056fea2646970667358221220003cc757eef01d60f55a57a425abe9fb13565d641c4f9275c44ef39f02b2148064736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100a05760003560e01c80638456cb59116100645780638456cb591461014b5780638da5cb5b14610160578063b37bbc2914610188578063d3f7836e14610190578063e3ac11ec146101a5578063f2fde38b146101ba57600080fd5b80630bf10e8c146100ba5780633ccfd60b146100e25780633f4ba83a146100f75780635c975abb1461010c578063715018a61461013657600080fd5b366100b55734156100b3576100b36101da565b005b600080fd5b3480156100c657600080fd5b506100cf6103b7565b6040519081526020015b60405180910390f35b3480156100ee57600080fd5b506100b361043c565b34801561010357600080fd5b506100b36104e1565b34801561011857600080fd5b50600054600160a01b900460ff1660405190151581526020016100d9565b34801561014257600080fd5b506100b36104f3565b34801561015757600080fd5b506100b3610505565b34801561016c57600080fd5b506000546040516001600160a01b0390911681526020016100d9565b6100b36101da565b34801561019c57600080fd5b506100cf610515565b3480156101b157600080fd5b506100cf61056b565b3480156101c657600080fd5b506100b36101d5366004610835565b610690565b6101e26106cb565b6000341161022a5760405162461bcd60e51b815260206004820152601060248201526f053656e642045544820746f20737761760841b60448201526064015b60405180910390fd5b60408051600280825260608201835260009260208301908036833701905050905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2816000815181106102735761027361087b565b60200260200101906001600160a01b031690816001600160a01b031681525050736b175474e89094c44da98b954eedeac495271d0f816001815181106102bb576102bb61087b565b6001600160a01b0390921660209283029190910190910152603261271060006102e64261012c6108a7565b90506000670de0b6b3a7640000836102fe86826108c0565b3461030761056b565b61031191906108d3565b61031b91906108d3565b61032591906108ea565b61032f91906108ea565b600354604051637ff36ab560e01b81529192506001600160a01b031690637ff36ab59034906103689085908a903390899060040161090c565b60006040518083038185885af1158015610386573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526103af9190810190610976565b505050505050565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561040d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104319190610a53565b509195945050505050565b6104446106f6565b600080546040516001600160a01b039091169047908381818185875af1925050503d8060008114610491576040519150601f19603f3d011682016040523d82523d6000602084013e610496565b606091505b50509050806104de5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610221565b50565b6104e96106f6565b6104f1610723565b565b6104fb6106f6565b6104f16000610778565b61050d6106f6565b6104f16107c8565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561040d573d6000803e3d6000fd5b600080600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156105c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e59190610a53565b5050509150506000600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610640573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106649190610a53565b5050509150508082670de0b6b3a764000061067f91906108d3565b61068991906108ea565b9250505090565b6106986106f6565b6001600160a01b0381166106c257604051631e4fbdf760e01b815260006004820152602401610221565b6104de81610778565b600054600160a01b900460ff16156104f15760405163d93c066560e01b815260040160405180910390fd5b6000546001600160a01b031633146104f15760405163118cdaa760e01b8152336004820152602401610221565b61072b61080b565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107d06106cb565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861075b3390565b600054600160a01b900460ff166104f157604051638dfc202b60e01b815260040160405180910390fd5b60006020828403121561084757600080fd5b81356001600160a01b038116811461085e57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156108ba576108ba610891565b92915050565b818103818111156108ba576108ba610891565b80820281158282048414176108ba576108ba610891565b60008261090757634e487b7160e01b600052601260045260246000fd5b500490565b600060808201868352602060808185015281875180845260a086019150828901935060005b818110156109565784516001600160a01b031683529383019391830191600101610931565b50506001600160a01b039690961660408501525050506060015292915050565b6000602080838503121561098957600080fd5b825167ffffffffffffffff808211156109a157600080fd5b818501915085601f8301126109b557600080fd5b8151818111156109c7576109c7610865565b8060051b604051601f19603f830116810181811085821117156109ec576109ec610865565b604052918252848201925083810185019188831115610a0a57600080fd5b938501935b82851015610a2857845184529385019392850192610a0f565b98975050505050505050565b805169ffffffffffffffffffff81168114610a4e57600080fd5b919050565b600080600080600060a08688031215610a6b57600080fd5b610a7486610a34565b9450602086015193506040860151925060608601519150610a9760808701610a34565b9050929550929590935056fea2646970667358221220003cc757eef01d60f55a57a425abe9fb13565d641c4f9275c44ef39f02b2148064736f6c63430008140033",
  "devdoc": {
    "author": "BuidlGuidl",
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "withdraw()": {
        "notice": "Function that allows the owner to withdraw all the Ether in the contract The function can only be called by the owner of the contract as defined by the isOwner modifier"
      }
    },
    "notice": "A smart contract that allows changing a state variable of the contract and tracking the changes It also allows the owner to withdraw the Ether in the contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 54,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 232,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 384,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "ethUsdPriceFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 387,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "daiUsdPriceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 390,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "router",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IUniswapV2Router)361"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router)361": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router",
        "numberOfBytes": "20"
      }
    }
  }
}